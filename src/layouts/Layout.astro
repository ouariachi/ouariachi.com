---
import "../styles/global.css";
import { getLangFromUrl } from "../i18n/utils";
import Header from "../components/Header.astro";
import { ClientRouter } from "astro:transitions";

const lang = getLangFromUrl(Astro.url);
const { title, headerMinimal = false } = Astro.props;
---

<!doctype html>
<html lang={lang} class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/png" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<title>
			{title ? `${title} | ` : ""}
			Mohamed Mohamed el Ouariachi
		</title>

		<link
			href="https://api.fontshare.com/v2/css?f[]=synonym@400&f[]=amulya@700&display=swap"
			rel="stylesheet"
		/>

		<ClientRouter />
	</head>

	<body class="bg-background text-text transition-all font-synonym">
		<main class="pt-5 max-w-[1000px] mx-auto px-2 xl:px-0">
			<Header headerMinimal={headerMinimal} />
			<slot />
		</main>

		<div id="cursor" class="hidden md:block" transition:persist>
			<img id="cursor-img" src="" alt="" />
		</div>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>

<script>
	document.addEventListener("astro:page-load", () => {
		const storedTheme = localStorage.getItem("theme");
		if (storedTheme === "dark") {
			document.documentElement.classList.add("dark");
		} else if (storedTheme === "light") {
			document.documentElement.classList.remove("dark");
		} else {
			const userPrefersDark = window.matchMedia(
				"(prefers-color-scheme: dark)",
			).matches;
			if (userPrefersDark) {
				document.documentElement.classList.add("dark");
			} else {
				document.documentElement.classList.remove("dark");
			}
		}
	})
</script>

<script is:inline>
	const cursor = document.getElementById("cursor");
	const cursorImg = document.getElementById("cursor-img");
	let activeImg = null;

	let lastClientX = 0;
	let lastClientY = 0;

	window.addEventListener("mousemove", handleMouseMove);
	window.addEventListener("scroll", handleMouseMove);
	window.addEventListener("resize", handleMouseMove);

	function handleMouseMove(e) {
		if (e.clientX !== undefined && e.clientY !== undefined) {
			lastClientX = e.clientX;
			lastClientY = e.clientY;
		}

		const target = document.elementFromPoint(lastClientX, lastClientY);

		if (target && target.classList.contains("openCursor")) {
			if (activeImg !== target) {
				activeImg = target;
				const src = activeImg.currentSrc || activeImg.src;
				cursorImg.src = src;
			}

			const rect = activeImg.getBoundingClientRect();

			const cursorSize = rect.width;
			const cursorLeft = lastClientX - cursorSize / 2;
			const cursorTop = lastClientY - cursorSize / 2;
			cursor.style.left = cursorLeft + "px";
			cursor.style.top = cursorTop + "px";
			cursor.style.width = cursorSize + "px";
			cursor.style.height = cursorSize + "px";
			cursor.style.borderWidth = "2px";
			cursor.style.opacity = "1";

			const visibleWidth = rect.width;
			const visibleHeight = rect.height;
			cursorImg.style.width = visibleWidth + "px";
			cursorImg.style.height = visibleHeight + "px";

			const offsetX = lastClientX - rect.left;
			const offsetY = lastClientY - rect.top;
			const imgLeft = -offsetX + cursorSize / 2;
			const imgTop = -offsetY + cursorSize / 2;
			cursorImg.style.transform = `translate(${imgLeft}px, ${imgTop}px)`;

			const compuedStyle = getComputedStyle(
				activeImg.parentElement || activeImg,
			);
			cursorImg.style.borderTopRightRadius = compuedStyle.borderTopRightRadius;
			cursorImg.style.borderBottomRightRadius =
				compuedStyle.borderBottomRightRadius;
			cursorImg.style.borderTopLeftRadius = compuedStyle.borderTopLeftRadius;
			cursorImg.style.borderBottomLeftRadius =
				compuedStyle.borderBottomLeftRadius;
		} else {
			activeImg = null;
			cursor.style.width = "0px";
			cursor.style.height = "0px";
			cursor.style.borderWidth = "8px";
			cursor.style.opacity = "0";
		}
	}
</script>
